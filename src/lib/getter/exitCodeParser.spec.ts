import { parseExitCodes } from "./exitCodeParser";

const code =
  "";

describe("Exit code parser", () => {
  it("parses the exit code", () => {
    const exitCodes = parseExitCodes(Buffer.from(code, "base64").toString());
    expect(exitCodes).toEqual([16]);
  });
});
